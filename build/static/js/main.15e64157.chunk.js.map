{"version":3,"sources":["components/Painting.js","components/List.js","components/App.js","index.js"],"names":["Painting","period","i","this","props","length","info","hideInformation","artist","year","medium","location","title","src","url","alt","width","onClick","Component","List","listPaintings","bind","getPageNumbers","indexOfLastPainting","currentPage","resultsPerPage","indexOfFirstPainting","paintings","slice","map","item","key","scale","e","pageNumbers","numPages","push","number","id","className","pageNum","prevBtn","nextBtn","prevPage","nextPage","App","state","orderBy","searchBy","searchFor","suggestions","ascendingOrder","showSuggestions","showSearchbar","showOrderBy","showSearchBy","showAscendingOrder","showResultsPerPage","showImageSize","showHideInfo","setSearchFor","setOrderBy","setSearchBy","toggleAscendingOrder","setResultsPerPage","setImageSize","toggleHideInformation","hideImage","showImage","clearSuggestions","clickSuggestion","gotoNextPage","gotoPrevPage","getData","sortData","setPageNumber","setNumPages","type","placeholder","onChange","target","value","defaultChecked","name","console","log","data","setState","res","searchField","filter","painting","toLowerCase","match","includes","j","sort","document","getElementById","style","display","ascending","a","b","localeCompare","textContent","Math","ceil","val","image","imageSrc","getAttribute","altText","imageWidth","querySelector","setAttribute","padding","stopPropagation","onOutsideClick","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.15e64157.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\n// Creates an component that shows an image of a painting and information about it\nclass Painting extends Component {\n\n    render() {\n        // Variable to store the periods associated with the painting\n        let period = \"\";\n        // Each period will be listed seperated by a comma\n        for(let i=0;i< this.props.period.length;i++){\n            if(i > 0){\n                period = period + \", \" + this.props.period[i];\n            }\n            else {\n                period = period + this.props.period[i];\n            }\n        }\n        // Variable to store information about the paiting\n        let info = null;\n        // If the props value is true then show the painting information\n        if(!this.props.hideInformation) {\n            info = \n                <div>\n                    <p>Artist: { this.props.artist }</p>\n                    <p>Year: { this.props.year }</p>\n                    <p>Period: { period }</p> \n                    <p>Medium: { this.props.medium }</p>\n                    <p>Location: { this.props.location }</p>\n                </div>\n        }\n        return (\n            /* Display the painting properties within DOM elements */\n            <section>\n                <h2>{ this.props.title }</h2>\n                <img src={ this.props.url } alt={ this.props.title } width={ this.props.width } onClick={ this.props.onClick }/>\n                { info }                \n            </section>  \n        );\n    }\n}\n\nexport default Painting;","import React, { Component } from 'react';\nimport Painting from './Painting';\n\n// creates a component with a list of painting components\nclass List extends Component {\n\n    constructor(props) {\n        super();\n        this.listPaintings = this.listPaintings.bind(this);\n        this.getPageNumbers = this.getPageNumbers.bind(this);\n    }\n   \n    // Function that creates a list of Painting components\n    listPaintings() {\n        // Variable to store the index of the last painting on page\n        const indexOfLastPainting = this.props.currentPage * this.props.resultsPerPage;\n        // Variable to store the index of the first painting on page \n        const indexOfFirstPainting = indexOfLastPainting - this.props.resultsPerPage;\n       \n        // Iterate through array and each time create a new component passing in respective properties\n        return this.props.paintings.slice(indexOfFirstPainting, indexOfLastPainting).map((item, i) =>\n            <Painting key={i} title={item.title} artist={item.artist} url={item.url} \n                year={item.year} period={item.period} medium={item.medium} location={item.location} \n                width={item.width*this.props.scale} hideInformation={this.props.hideInformation}\n                onClick={e => this.props.onClick(e)} \n            /> \n        );\n    }\n\n    // Function that returns the page numbers \n    getPageNumbers() {\n        // Array for storing page numbers\n        const pageNumbers = [];\n        // For each page add number to array\n        for (let i = 1; i <= this.props.numPages; i++) {\n            pageNumbers.push(i);\n        }\n        // Return the page number as a list item\n        return pageNumbers.map((number) => \n            <li key={number}\n                id={number} \n                className={number === this.props.currentPage ? \"currentPage\" : \"pageNumber\"}\n                onClick={() => this.props.pageNum(number) } >\n                {number}\n            </li>\n        );\n    }\n\n     render() { \n        // Variables to store the previous and next buttons\n        let prevBtn;\n        let nextBtn;\n\n        // If the current page is greater than 1 then show previous button with onClick fuction\n        if(this.props.currentPage > 1) {\n            prevBtn = <li onClick={()=> this.props.prevPage()}>&laquo;</li>;\n        }\n        // Else disable the button\n        else {\n            prevBtn = <li className=\"disabled\">&laquo;</li>;\n        }\n        // If the current page is les than the last page then show next button with onClick function\n        if(this.props.currentPage < this.props.numPages) {\n            nextBtn = <li onClick={()=> this.props.nextPage()}>&raquo;</li>;\n        }\n        // Else disable the button\n        else {\n            nextBtn = <li className=\"disabled\">&raquo;</li>;\n        }\n         return (   \n            <div>   \n               <div id=\"resultsGrid\">\n                    <p>{this.props.paintings.length} results found</p>\n                    <ul id=\"page-numbers\"  >\n                        { prevBtn }\n                        {/* Call function to show page numbers */}\n                        {this.getPageNumbers()}\n                        { nextBtn }\n                    </ul>\n                </div>\n                {/* Call function to show each painting */}\n                {this.listPaintings()}                           \n            </div>\n         );\n    };        \n}\n\nexport default List;","import React, { Component } from 'react';\nimport OutsideClickHandler from 'react-outside-click-handler';\nimport List from './List';\nimport data from \"../data/paintings.json\";\n\n// Creates a component containing a list of painting components and options to filter\nclass App extends Component {\n\n    constructor(props) {\n        super();\n\n        this.state = {\n            paintings: [],                      // Array of paintings taken from JSON file\n            orderBy: \"year\",                    // Property that paintings will be ordered by\n            searchBy: \"artist\",                 // Property used for searching pintings\n            searchFor: \"\",                      // Value used for searches\n            suggestions: [],                    // Array of suggestions based on the value of searchFor \n            ascendingOrder: true,               // Boolean used to determine ascending or descending order of paintings\n            showSuggestions: false,             // Boolean used to determine whether or not suggestions are show\n            hideInformation: false,             // Boolean used to determine whether or not additional information about each painting is shown\n            scale: 1,                           // Used to store the scale of the image\n            currentPage: 1,                     // Used to store the current results page\n            resultsPerPage: 5,                  // Used to store the number of results for each page\n            numPages: 0                         // Used to store the total number of pages \n        };\n\n        // Functions triggered when the page loads to show DOM elements\n        this.showSearchbar = this.showSearchbar.bind(this);\n        this.showOrderBy = this.showOrderBy.bind(this);\n        this.showSearchBy = this.showSearchBy.bind(this);\n        this.showSuggestions = this.showSuggestions.bind(this);\n        this.showAscendingOrder = this.showAscendingOrder.bind(this);\n        this.showResultsPerPage = this.showResultsPerPage.bind(this);\n        this.showImageSize = this.showImageSize.bind(this);\n        this.showHideInfo = this.showHideInfo.bind(this);\n        \n        // Functions that are triggered by click events\n        this.setSearchFor = this.setSearchFor.bind(this);\n        this.setOrderBy = this.setOrderBy.bind(this);\n        this.setSearchBy = this.setSearchBy.bind(this);         \n        this.toggleAscendingOrder = this.toggleAscendingOrder.bind(this);\n        this.setResultsPerPage = this.setResultsPerPage.bind(this);\n        this.setImageSize = this.setImageSize.bind(this); \n        this.toggleHideInformation = this.toggleHideInformation.bind(this);\n        this.hideImage = this.hideImage.bind(this);\n        this.showImage = this.showImage.bind(this);\n        this.clearSuggestions = this.clearSuggestions.bind(this);\n        this.clickSuggestion = this.clickSuggestion.bind(this);\n        this.gotoNextPage = this.gotoNextPage.bind(this);\n        this.gotoPrevPage = this.gotoPrevPage.bind(this);\n        \n        // Functions triggered by calling other functions\n        this.getData = this.getData.bind(this);\n        this.sortData = this.sortData.bind(this);\n        this.setPageNumber = this.setPageNumber.bind(this);\n        this.setNumPages = this.setNumPages.bind(this);\n    }\n\n    // When component loads \n    componentDidMount() {\n        // Call function to get the list of paintings\n        this.getData();\n    }\n\n    // Function that shows a searchbar for handling user input\n    showSearchbar() {\n        return (\n            <div>\n                <input type=\"text\" id=\"search\" placeholder=\"some text\" onChange={e => this.setSearchFor(e.target.value)} />\n            </div>\n        )\n    }\n\n    // Function that shows a checkbox for changing the order of results\n    showAscendingOrder() {\n        return (\n            <div>\n                <label>Ascending order</label>\n                <input type=\"checkbox\" defaultChecked onChange={() => this.toggleAscendingOrder()} />\n            </div>\n        );\n    }\n\n    // Function that shows a drop down menu for changing the property that paintings are ordered by\n    showOrderBy() {\n        return (\n            <div>\n                <label>Order by</label>\n                <select id=\"orderBy\" onChange={e => this.setOrderBy(e.target.value)}>\n                    <option value=\"year\">Year</option>\n                    <option value=\"artist\">Artist</option>\n                    <option value=\"title\">Painting</option>\n                </select>\n            </div>\n        )\n    }\n\n    // Function that shows a drop down menu for changing the property to search by\n    showSearchBy() {\n        return (\n            <div>\n                <label>Search by</label>\n                <select id=\"searchFields\" onChange={e => this.setSearchBy(e.target.value)}>\n                    <option value=\"artist\">Artist</option>\n                    <option value=\"title\">Painting</option>\n                    <option value=\"museum\">Museum</option>\n                    <option value=\"period\">Period</option>\n                </select>\n            </div>\n        )\n    }\n\n    // Function that shows a radio button group for selecting the number of paintings shown on each page\n    showResultsPerPage() {\n        return (\n            <div>\n                <label>Results per page</label>    \n                <input type=\"radio\" name=\"numResults\" value=\"5\" defaultChecked onChange={e => this.setResultsPerPage(e.target.value)} />\n                <label>5</label>\n                <input type=\"radio\" name=\"numResults\" value=\"10\" onChange={e => this.setResultsPerPage(e.target.value)} />\n                <label>10</label>\n                <input type=\"radio\" name=\"numResults\" value=\"15\" onChange={e => this.setResultsPerPage(e.target.value)} />\n                <label>15</label>\n            </div>\n        )\n    }\n    \n    // Function that shows a radio button group for selecting the size of each image\n    showImageSize() {\n        return (\n            <div>\n                <label>Image size</label>    \n                <input type=\"radio\" name=\"imageSize\" value=\".5\" onChange={e => this.setImageSize(e.target.value)} />\n                <label>Small</label>\n                <input type=\"radio\" name=\"imageSize\" value=\"1\" defaultChecked onChange={e => this.setImageSize(e.target.value)} />\n                <label>Large</label>\n            </div>\n        )     \n    }\n\n    // Function that shows a checkbox for setting whether or not information about each painting is shown\n    showHideInfo() {\n        return (\n            <div>\n                <label>Hide painting information</label>\n                <input type=\"checkbox\" onChange={() => this.toggleHideInformation()} />\n            </div>\n        )\n    }\n    \n    // Function that gets the data from JSON file and populates array of paintings\n    getData() {     \n        // Put list of paintings in the correct order\n        this.sortData();\n        console.log(data.paintings[0])\n        // Set painting's state to the JSON array\n        this.setState({\n            paintings: data.paintings\n        }, function(){\n            // Call function to set the number of pages required\n            this.setNumPages()\n        });\n\n        // If searchbar is not empty\n        if(this.state.searchFor !== \"\") {\n            let paintings = data.paintings                          // To store the painting data\n            let res = [];                                           // To store the resulting data from searching array\n            let suggestions = [];                                   // To store suggestions passed on user input\n            let searchField = this.state.searchBy;                  // To store the property to search\n            let searchFor = this.state.searchFor;                   // To store the value to search for\n            let showSuggestions = this.state.showSuggestions;       // To store whether or not to show suggestions based on user input\n\n            // If searching by artist\n            if(searchField === \"artist\") {\n                // Return all paintings that match that pattern\n                res = paintings.filter(function(painting) {\n                    return painting.artist.toLowerCase().match(searchFor);\n                });\n                // Iterate through list of results\n                for(let i=0;i< res.length;i++) {\n                    // If suggestions array doesnt already contain the artist\n                    if(!suggestions.includes(res[i].artist)) {\n                        // Add it to array\n                        suggestions.push(res[i].artist);\n                    }\n                }\n            }\n            // If searching by painting\n            else if(searchField === \"title\") {\n                res = paintings.filter(function(painting) {\n                    return painting.title.toLowerCase().match(searchFor);\n                });\n                for(let i=0;i< res.length;i++) {\n                    if(!suggestions.includes(res[i].title)) {\n                        suggestions.push(res[i].title);\n                    }\n                }\n            }\n            // If searching by museum\n            else if(searchField === \"museum\") {\n                res = paintings.filter(function(painting) {\n                    return painting.location.toLowerCase().match(searchFor);\n                });\n                for(let i=0;i< res.length;i++) {\n                    if(!suggestions.includes(res[i].location)) {\n                        suggestions.push(res[i].location);\n                    }\n                }\n            }\n            // If searching by period\n            else if(searchField === \"period\") {\n                // Iterate through list of paintings\n                for(let i=0;i< paintings.length;i++){\n                    // For each painting iterate through the list of periods              \n                    for(let j=0;j< paintings[i].period.length;j++){\n                        // Store the current period\n                        let period = paintings[i].period[j]\n                        // If the period matches the value input\n                        if(period.toLowerCase().match(searchFor) !== null) {\n                            // Add painting to the results\n                            res.push(paintings[i]);\n                            // Check that the period is not already in suggestions array\n                            if(!suggestions.includes(period)){\n                                // If not then add it\n                                suggestions.push(period);\n                            }\n                        }\n                    }\n                }\n            }\n\n            // If true\n            if(showSuggestions) {\n                // Order array\n                suggestions.sort();\n                // Update state with suggestions\n                this.setState({\n                    suggestions: suggestions\n                }, function() {\n                    // Create list of suggestions\n                    this.showSuggestions();\n                    // Make suggestions appear on DOM\n                    document.getElementById(\"suggestionsMenu\").style.display = \"block\";\n                })\n            }\n            \n            // Update state's paintings \n            this.setState({\n                paintings: res\n            });\n        }\n    }\n\n    // Function that changes the order of the paintings\n    sortData() {\n        // Assign state's ascendingOrder property to a variable\n        let ascending = this.state.ascendingOrder;\n        // Assign state's orderBy propery to a variable\n        let orderBy = this.state.orderBy;\n        // If true then order paintings by year\n        if(orderBy === \"year\") {       \n            data.paintings.sort(function(a, b){ \n                // If true then order ascendingly\n                if(ascending) {\n                    console.log(\"true\")\n                    return a.year - b.year;\n                }\n                // Else order descendingly\n                else {\n                    console.log(\"false\")\n                    return b.year - a.year;\n                }\n            });\n        }\n        // Else if true then order paintings by title\n        else if(orderBy === \"title\") {\n            data.paintings.sort(function(a, b){\n                if(ascending) {\n                    console.log(\"true\")\n                    return a.title.localeCompare(b.title);\n                }\n                else {\n                    console.log(\"false\")\n                    return b.title.localeCompare(a.title);\n                }\n            });\n        }\n        // Else if true then order paintings by artist\n        else if(this.state.orderBy === \"artist\") {\n            data.paintings.sort(function(a, b){\n                if(ascending) {\n                    console.log(\"true\")\n                    return a.artist.localeCompare(b.artist);\n                }\n                else {\n                    console.log(\"false\")\n                    return b.artist.localeCompare(a.artist);\n                }\n            });\n        }\n    }\n\n    // Function that updates the state's searchFor property whenever the searchbar's text is changed\n    setSearchFor(value) {\n        // Check that search value is not empty\n        if(value === \"\"){\n            // Clear list of suggestions\n            this.clearSuggestions();\n        }\n        // Update state with new value for searchFor, allow suggestions and reset to page 1 of results\n        this.setState({\n            searchFor: value,\n            currentPage: 1,\n            showSuggestions: true\n        }, function() {\n            // Get new paintings based on search information\n            this.getData();\n        });  \n    }\n\n    // Function that updates the state's searchBy property whenever the dropdown menu is changed\n    setSearchBy(value) {\n        this.setState({\n            searchBy: value\n        }, function(){\n            this.getData();\n        });\n    }\n\n    // Function that updates the state's orderBy property whenever the dropdown menu is changed\n    setOrderBy(value) {\n        this.setState({\n            orderBy: value\n        }, function(){\n            this.getData();\n        });\n    }\n\n    // Function that toggles the state's ascendingOrder property whenever the checkbox is changed\n    toggleAscendingOrder() {\n        this.setState({\n            ascendingOrder: !this.state.ascendingOrder\n        }, function(){\n            this.getData();\n        })\n    }\n\n\n    // Function that creates a list of suggestions \n    showSuggestions() {   \n        // Iterate through array of suggestions and create a list item  for each\n         return this.state.suggestions.map((item, i) =>  \n            <li key={i} className=\"suggestionItem\" onClick={e=> this.clickSuggestion(e.target.textContent)}>{item}</li>          \n        );\n    }\n\n    // Function that sets the number of pages by dividing the number of paintings by the number of results per page\n    setNumPages() {\n        this.setState({\n            numPages: Math.ceil(this.state.paintings.length / this.state.resultsPerPage)\n        })\n    }\n\n    // Function that removes the list of suggestions from DOM\n    clearSuggestions() {\n        document.getElementById(\"suggestionsMenu\").style.display = \"none\";\n        // Stop suggestions from appearing\n        this.setState({\n            showSuggestions: false\n        })\n    }\n\n    // Function that sets the searchbar value to the text of the selected suggestion \n    clickSuggestion(val) {\n        // Convert the suggestion to lower case and assign it's text to the searchbar\n        document.getElementById(\"search\").value = val.toLowerCase();\n        // Update the state's searchFor property\n        this.setSearchFor(val.toLowerCase());\n        // Remove the list of suggestions\n        this.clearSuggestions();\n    }\n\n    // Function to show the fullscreen image on DOM\n    showImage(image) {\n        // Get the image's source, alt and width attributes \n        let imageSrc = image.getAttribute('src');\n        let altText = image.getAttribute('alt');\n        let imageWidth = image.getAttribute(\"width\");\n        // Get the image's size from the radio button group\n        let scale = document.querySelector(\"input[name=imageSize]:checked\").value;\n        // Add image border to DOM\n        document.getElementById(\"fsimageBorder\").style.display = \"block\"; \n        // Assign the image's source and alt to the fullscreen image\n        document.getElementById(\"fsimage\").setAttribute(\"src\", imageSrc);\n        document.getElementById(\"fsimage\").setAttribute(\"alt\", altText);\n        // If the scale is 50% then multiply the width by 2 to get its size correct\n        if (scale === '.5') {\n            imageWidth = imageWidth * 2;\n        }\n        // Depending on the width of the original image\n        if(imageWidth >= 768) {\n            // A different width and padding is applied to the full screen image\n            document.getElementById(\"fsimage\").style.width = \"70%\";\n            // This means padding-top and bottom of 5% and padding-right and left of 15%\n            document.getElementById(\"fsimageBorder\").style.padding = \"5% 15%\";\n        }\n        else if(imageWidth >= 512) {\n            document.getElementById(\"fsimage\").style.width = \"50%\";\n            document.getElementById(\"fsimageBorder\").style.padding = \"5% 25%\";\n        }\n        else {\n            document.getElementById(\"fsimage\").style.width = \"30%\";\n            document.getElementById(\"fsimageBorder\").style.padding = \"5% 35%\";\n        }\n    }\n\n     \n    // Function to remove the fullscreen image from DOM\n    hideImage() {\n        document.getElementById(\"fsimageBorder\").style.display = \"none\";\n    }\n\n    // Function that changes the number of paintings per page whenever drop down menu is changed\n    setResultsPerPage(value) {\n        this.setState({\n            resultsPerPage: value,\n            currentPage: 1\n        }, function() {\n            this.setNumPages();\n        })\n    }\n\n    // Function that changes the size of images\n    setImageSize(value) {\n        this.setState({\n            scale: value \n        })\n    }\n\n    // Function that sets whether or not painting information is shown\n    toggleHideInformation() {\n        this.setState({\n            hideInformation: !this.state.hideInformation\n        })\n    }    \n\n    // Function that changes the page number being shown\n    setPageNumber(id) {\n        this.setState({\n          currentPage: id\n        })\n      }\n    \n      // Function that changes the page number to the next page\n      gotoNextPage() {\n        this.setPageNumber(this.state.currentPage + 1)\n      }\n    \n      // Function that changes the page number to the previous page\n      gotoPrevPage() {\n        this.setPageNumber(this.state.currentPage - 1)\n      }\n\n     render() { \n\n         return(   \n            <div>   \n                {/* \n                    A fullscreen image of a painting (hidden by default) with a border around the edges\n                    Click event on border is used to hide the image and return to the list of paintings \n                    Click event on image is just called to prevent it from calling the parent's click function \n                */}\n                <div id=\"fsimageBorder\"  onClick={e => this.hideImage(e) } >  \n                    <img id=\"fsimage\" alt=\"\" src=\"\" onClick={e=> {e.stopPropagation();}}/>                                    \n                </div> \n                \n                {/* Call function to render search by drop down menu */}\n                {this.showSearchBy()}\n                {/* This tag is used to remove list of suggestions whenever mouse is pressed outside of its child elements */}\n                <OutsideClickHandler onOutsideClick={() => {this.clearSuggestions()}} >\n                    {/* Call function to render input box */}\n                    {this.showSearchbar()}\n                    {/*  List of suggestions*/}\n                    <ul id=\"suggestionsMenu\" className=\"suggestion\">\n                        {/* Call function to return each suggestion as a list item */}\n                        {this.showSuggestions()}\n                    </ul> \n                </OutsideClickHandler>\n\n                {/* Call function to render order by drop down menu */}\n                {this.showOrderBy()}\n                {/* Call function to render ascending order checkbox */}\n                {this.showAscendingOrder()}\n                {/* Call function to render results per page radio buttons */}\n                {this.showResultsPerPage()}\n                {/* Call function to render image size radio buttons */}\n                {this.showImageSize()}\n                {/* Call function to render hide painting information checkbox */}\n                {this.showHideInfo()}\n                \n                {/*  Generate list of paintings and page numbers by passing props */}\n               <List paintings={ this.state.paintings } resultsPerPage={this.state.resultsPerPage}\n                    scale={ this.state.scale } numPages={this.state.numPages}\n                    hideInformation={ this.state.hideInformation } currentPage={this.state.currentPage}\n                    onClick={e => this.showImage(e.target)} pageNum={e => this.setPageNumber(e)}\n                    prevPage={() => this.gotoPrevPage()} nextPage={() => this.gotoNextPage()} \n                />                        \n            </div>\n         );\n    };\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}